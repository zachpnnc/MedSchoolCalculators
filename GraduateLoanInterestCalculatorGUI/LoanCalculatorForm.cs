using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GraduateLoanInterestCalculatorGUI
{
    // Represents the main window of the application
    public partial class LoanCalculatorForm : Form
    {
        // --- UI Control Declarations ---
        // These would typically be generated by the WinForms Designer in Form1.Designer.cs
        // We declare them here for clarity in this single-file example.
        private Label lblLoanAmount;
        private TextBox txtLoanAmount;
        private Label lblInterestRate;
        private TextBox txtInterestRate;
        private Button btnCalculate;
        private Label lblSummaryTitle;
        private Label lblTotalPrincipalResult;
        private Label lblInterestStudyResult;
        private Label lblBalanceAfterStudyResult;
        private Label lblInterestGraceResult;
        private Label lblBalanceAfterGraceResult;
        private Label lblMonthlyPaymentResult;
        private DataGridView dgvAmortization; // To display the schedule
        private Label lblError; // To display validation errors

        // Constructor for the form
        public LoanCalculatorForm()
        {
            InitializeComponent(); // Method to set up UI controls
        }

        // --- UI Initialization (Simulates Form1.Designer.cs) ---
        private void InitializeComponent()
        {
            // Initialize Controls
            this.lblLoanAmount = new Label();
            this.txtLoanAmount = new TextBox();
            this.lblInterestRate = new Label();
            this.txtInterestRate = new TextBox();
            this.btnCalculate = new Button();
            this.lblSummaryTitle = new Label();
            this.lblTotalPrincipalResult = new Label();
            this.lblInterestStudyResult = new Label();
            this.lblBalanceAfterStudyResult = new Label();
            this.lblInterestGraceResult = new Label();
            this.lblBalanceAfterGraceResult = new Label();
            this.lblMonthlyPaymentResult = new Label();
            this.dgvAmortization = new DataGridView();
            this.lblError = new Label();

            // Set properties for Loan Amount controls
            this.lblLoanAmount.AutoSize = true;
            this.lblLoanAmount.Location = new Point(12, 15);
            this.lblLoanAmount.Name = "lblLoanAmount";
            this.lblLoanAmount.Size = new Size(130, 13);
            this.lblLoanAmount.Text = "Loan Amount Per Year:";
            this.txtLoanAmount.Location = new Point(148, 12);
            this.txtLoanAmount.Name = "txtLoanAmount";
            this.txtLoanAmount.Size = new Size(100, 20);
            this.txtLoanAmount.TabIndex = 0; // Order for pressing Tab

            // Set properties for Interest Rate controls
            this.lblInterestRate.AutoSize = true;
            this.lblInterestRate.Location = new Point(12, 41);
            this.lblInterestRate.Name = "lblInterestRate";
            this.lblInterestRate.Size = new Size(120, 13);
            this.lblInterestRate.Text = "Annual Interest Rate (%):";
            this.txtInterestRate.Location = new Point(148, 38);
            this.txtInterestRate.Name = "txtInterestRate";
            this.txtInterestRate.Size = new Size(100, 20);
            this.txtInterestRate.TabIndex = 1;

            // Set properties for Calculate Button
            this.btnCalculate.Location = new Point(265, 12);
            this.btnCalculate.Name = "btnCalculate";
            this.btnCalculate.Size = new Size(86, 46);
            this.btnCalculate.TabIndex = 2;
            this.btnCalculate.Text = "Calculate";
            this.btnCalculate.UseVisualStyleBackColor = true;
            this.btnCalculate.Click += new EventHandler(this.btnCalculate_Click); // Link button click to event handler

            // Set properties for Error Label
            this.lblError.AutoSize = true;
            this.lblError.ForeColor = Color.Red;
            this.lblError.Location = new Point(12, 70);
            this.lblError.Name = "lblError";
            this.lblError.Size = new Size(0, 13); // Start empty
            this.lblError.MinimumSize = new Size(330, 0); // Allow wrapping

            // Set properties for Summary Labels (positioned below inputs/error)
            int summaryStartY = 95;
            this.lblSummaryTitle.AutoSize = true;
            this.lblSummaryTitle.Font = new Font(this.Font, FontStyle.Bold);
            this.lblSummaryTitle.Location = new Point(12, summaryStartY);
            this.lblSummaryTitle.Name = "lblSummaryTitle";
            this.lblSummaryTitle.Text = "Summary:";

            this.lblTotalPrincipalResult.AutoSize = true;
            this.lblTotalPrincipalResult.Location = new Point(15, summaryStartY + 20);
            this.lblTotalPrincipalResult.Name = "lblTotalPrincipalResult";
            this.lblTotalPrincipalResult.Text = "Total Principal Borrowed: ";

            this.lblInterestStudyResult.AutoSize = true;
            this.lblInterestStudyResult.Location = new Point(15, summaryStartY + 35);
            this.lblInterestStudyResult.Name = "lblInterestStudyResult";
            this.lblInterestStudyResult.Text = "Interest During Study: ";

            this.lblBalanceAfterStudyResult.AutoSize = true;
            this.lblBalanceAfterStudyResult.Location = new Point(15, summaryStartY + 50);
            this.lblBalanceAfterStudyResult.Name = "lblBalanceAfterStudyResult";
            this.lblBalanceAfterStudyResult.Text = "Balance After Study: ";

            this.lblInterestGraceResult.AutoSize = true;
            this.lblInterestGraceResult.Location = new Point(15, summaryStartY + 65);
            this.lblInterestGraceResult.Name = "lblInterestGraceResult";
            this.lblInterestGraceResult.Text = "Interest During Grace: ";

            this.lblBalanceAfterGraceResult.AutoSize = true;
            this.lblBalanceAfterGraceResult.Location = new Point(15, summaryStartY + 80);
            this.lblBalanceAfterGraceResult.Name = "lblBalanceAfterGraceResult";
            this.lblBalanceAfterGraceResult.Text = "Balance After Grace: ";

            this.lblMonthlyPaymentResult.AutoSize = true;
            this.lblMonthlyPaymentResult.Font = new Font(this.Font, FontStyle.Bold);
            this.lblMonthlyPaymentResult.Location = new Point(15, summaryStartY + 100);
            this.lblMonthlyPaymentResult.Name = "lblMonthlyPaymentResult";
            this.lblMonthlyPaymentResult.Text = "Monthly Payment: ";

            // Set properties for DataGridView (Amortization Schedule)
            this.dgvAmortization.AllowUserToAddRows = false;
            this.dgvAmortization.AllowUserToDeleteRows = false;
            this.dgvAmortization.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgvAmortization.Location = new Point(15, summaryStartY + 125); // Position below summary
            this.dgvAmortization.Name = "dgvAmortization";
            this.dgvAmortization.ReadOnly = true;
            // Anchor to resize with form
            this.dgvAmortization.Anchor = ((AnchorStyles.Top | AnchorStyles.Bottom)
            | AnchorStyles.Left)
            | AnchorStyles.Right;
            this.dgvAmortization.Size = new Size(750, 250); // Initial size
            this.dgvAmortization.TabIndex = 3;

            // Set Form Properties
            this.AutoScaleDimensions = new SizeF(6F, 13F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(784, 441); // Adjust form size
            this.MinimumSize = new Size(500, 400); // Prevent making it too small
            this.Controls.Add(this.dgvAmortization);
            this.Controls.Add(this.lblMonthlyPaymentResult);
            this.Controls.Add(this.lblBalanceAfterGraceResult);
            this.Controls.Add(this.lblInterestGraceResult);
            this.Controls.Add(this.lblBalanceAfterStudyResult);
            this.Controls.Add(this.lblInterestStudyResult);
            this.Controls.Add(this.lblTotalPrincipalResult);
            this.Controls.Add(this.lblSummaryTitle);
            this.Controls.Add(this.lblError);
            this.Controls.Add(this.btnCalculate);
            this.Controls.Add(this.txtInterestRate);
            this.Controls.Add(this.lblInterestRate);
            this.Controls.Add(this.txtLoanAmount);
            this.Controls.Add(this.lblLoanAmount);
            this.Name = "LoanCalculatorForm";
            this.Text = "Graduate Loan Calculator";
            ((ISupportInitialize)(this.dgvAmortization)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        // --- Event Handler for Calculate Button Click ---
        private void btnCalculate_Click(object sender, EventArgs e)
        {
            // Clear previous results and errors
            ClearResults();
            lblError.Text = "";

            // --- Input Validation ---
            decimal costPerYear;
            decimal annualInterestRatePercent;

            // Use CultureInfo.CurrentCulture to handle user's regional settings for decimal points/commas
            NumberStyles style = NumberStyles.Currency | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands;
            CultureInfo culture = CultureInfo.CurrentCulture;

            // Validate Loan Amount
            if (!decimal.TryParse(txtLoanAmount.Text.Replace(culture.NumberFormat.CurrencySymbol, "").Trim(), style, culture, out costPerYear) || costPerYear < 0)
            {
                lblError.Text = "Invalid Loan Amount Per Year. Please enter a non-negative number.";
                txtLoanAmount.Focus();
                return;
            }

            // Validate Interest Rate
            if (!decimal.TryParse(txtInterestRate.Text.Replace("%", "").Trim(), NumberStyles.Number, culture, out annualInterestRatePercent) || annualInterestRatePercent < 0)
            {
                lblError.Text = "Invalid Annual Interest Rate. Please enter a non-negative percentage.";
                txtInterestRate.Focus();
                return;
            }

            // --- Constants --- (Copied from console version)
            const int numberOfYearsStudy = 4;
            const int gracePeriodMonths = 6;
            const int repaymentYears = 10;
            const int monthsInYear = 12;

            // --- Calculations --- (Core logic adapted from console version)

            decimal annualInterestRateDecimal = annualInterestRatePercent / 100.0m;
            decimal monthlyInterestRate = annualInterestRateDecimal / monthsInYear;

            decimal totalPrincipalBorrowed = 0m;
            decimal totalSimpleInterestDuringStudy = 0m;

            // Calculate simple interest accrued during the 4 years of study
            for (int year = 1; year <= numberOfYearsStudy; year++)
            {
                decimal currentLoanPrincipal = costPerYear;
                totalPrincipalBorrowed += currentLoanPrincipal;
                int yearsOfInterestAccrual = numberOfYearsStudy - year + 1;
                decimal interestForThisLoan = currentLoanPrincipal * annualInterestRateDecimal * yearsOfInterestAccrual;
                totalSimpleInterestDuringStudy += interestForThisLoan;
            }

            decimal balanceAfterStudy = totalPrincipalBorrowed + totalSimpleInterestDuringStudy;

            // Grace Period Calculation
            decimal balanceAfterGrace = balanceAfterStudy;
            if (monthlyInterestRate > 0 && balanceAfterGrace > 0)
            {
                double compoundFactor = Math.Pow(1.0 + (double)monthlyInterestRate, gracePeriodMonths);
                balanceAfterGrace = balanceAfterStudy * (decimal)compoundFactor;
            }
            decimal interestAccruedDuringGrace = balanceAfterGrace - balanceAfterStudy;

            // Monthly Repayment Calculation
            decimal monthlyPayment = 0m;
            int totalNumberOfPayments = repaymentYears * monthsInYear;
            decimal currentBalance = balanceAfterGrace;

            if (currentBalance > 0)
            {
                if (monthlyInterestRate <= 0) // 0% interest
                {
                    if (totalNumberOfPayments > 0) monthlyPayment = currentBalance / totalNumberOfPayments;
                    else monthlyPayment = 0; // Avoid division by zero
                }
                else // Positive interest rate
                {
                    // Standard Loan Payment Formula
                    double monthlyRateDouble = (double)monthlyInterestRate;
                    double powerTerm = Math.Pow(1.0 + monthlyRateDouble, totalNumberOfPayments);
                    decimal numerator = currentBalance * monthlyInterestRate * (decimal)powerTerm;
                    decimal denominator = (decimal)powerTerm - 1.0m;

                    if (denominator != 0) monthlyPayment = numerator / denominator;
                    else monthlyPayment = 0; // Error case
                }
            }

            // --- Display Summary Results ---
            lblTotalPrincipalResult.Text = $"Total Principal Borrowed: {totalPrincipalBorrowed:C}";
            lblInterestStudyResult.Text = $"Interest During Study: {totalSimpleInterestDuringStudy:C}";
            lblBalanceAfterStudyResult.Text = $"Balance After Study: {balanceAfterStudy:C}";
            lblInterestGraceResult.Text = $"Interest During Grace: {interestAccruedDuringGrace:C}";
            lblBalanceAfterGraceResult.Text = $"Balance After Grace: {balanceAfterGrace:C}";

            if (currentBalance <= 0)
            {
                lblMonthlyPaymentResult.Text = "Monthly Payment: N/A (No Balance)";
            }
            else if (monthlyPayment <= 0 && monthlyInterestRate > 0) // Check if calculation failed
            {
                 lblMonthlyPaymentResult.Text = "Monthly Payment: Error";
                 lblError.Text = "Could not calculate monthly payment (check inputs).";
            }
            else
            {
                 lblMonthlyPaymentResult.Text = $"Monthly Payment: {monthlyPayment:C}";
            }


            // --- Populate Amortization Schedule ---
            PopulateAmortizationGrid(currentBalance, monthlyInterestRate, monthlyPayment, totalNumberOfPayments);
        }

        // --- Helper Methods ---

        // Clears previous calculation results from labels and the grid
        private void ClearResults()
        {
            lblTotalPrincipalResult.Text = "Total Principal Borrowed: ";
            lblInterestStudyResult.Text = "Interest During Study: ";
            lblBalanceAfterStudyResult.Text = "Balance After Study: ";
            lblInterestGraceResult.Text = "Interest During Grace: ";
            lblBalanceAfterGraceResult.Text = "Balance After Grace: ";
            lblMonthlyPaymentResult.Text = "Monthly Payment: ";
            dgvAmortization.DataSource = null; // Clear data source
            dgvAmortization.Rows.Clear(); // Clear any existing rows
            dgvAmortization.Columns.Clear(); // Clear existing columns
        }

        // Populates the DataGridView with the amortization schedule
        private void PopulateAmortizationGrid(decimal startingBalance, decimal monthlyRate, decimal monthlyPmt, int totalPayments)
        {
            if (startingBalance <= 0 || monthlyPmt <= 0)
            {
                // Don't show schedule if no balance or payment couldn't be calculated
                return;
            }

            // Create a DataTable to hold the schedule data
            DataTable schedule = new DataTable("AmortizationSchedule");
            schedule.Columns.Add("Month", typeof(int));
            schedule.Columns.Add("Start Balance", typeof(decimal));
            schedule.Columns.Add("Payment", typeof(decimal));
            schedule.Columns.Add("Interest Paid", typeof(decimal));
            schedule.Columns.Add("Principal Paid", typeof(decimal));
            schedule.Columns.Add("End Balance", typeof(decimal));
            schedule.Columns.Add("Total Paid", typeof(decimal));

            decimal currentBal = startingBalance;
            decimal totalPaid = 0m;

            for (int month = 1; month <= totalPayments; month++)
            {
                if (currentBal <= 0) break; // Stop if balance is already zero

                decimal interestForMonth = currentBal * monthlyRate;
                decimal principalPaid;
                decimal actualPayment = monthlyPmt;
                decimal startBalanceOfMonth = currentBal;

                // Adjust last payment or if payment exceeds remaining balance + interest
                if (month == totalPayments || monthlyPmt >= currentBal + interestForMonth)
                {
                    actualPayment = currentBal + interestForMonth;
                    principalPaid = currentBal;
                }
                else
                {
                    principalPaid = monthlyPmt - interestForMonth;
                }

                // Ensure principal doesn't exceed balance
                if (principalPaid > currentBal) principalPaid = currentBal;
                if (principalPaid < 0) principalPaid = 0; // Should not happen often

                // Recalculate interest based on actual payment if adjusted
                interestForMonth = actualPayment - principalPaid;
                if (interestForMonth < 0) interestForMonth = 0;


                currentBal -= principalPaid; // Update balance
                totalPaid += actualPayment; // Update total paid

                // Handle potential tiny balance due to rounding on the last payment
                if (month == totalPayments && currentBal != 0)
                {
                     // Force balance to zero on the final payment
                     actualPayment += currentBal;
                     principalPaid += currentBal;
                     totalPaid += currentBal; // Add the final adjustment to total paid
                     currentBal = 0m;
                }


                // Add row to DataTable
                schedule.Rows.Add(month, startBalanceOfMonth, actualPayment, interestForMonth, principalPaid, currentBal, totalPaid);
            }

            // Bind DataTable to DataGridView
            dgvAmortization.DataSource = schedule;

            // Format Currency Columns
            string currencyFormat = "C"; // Use system's currency format
            dgvAmortization.Columns["Start Balance"].DefaultCellStyle.Format = currencyFormat;
            dgvAmortization.Columns["Payment"].DefaultCellStyle.Format = currencyFormat;
            dgvAmortization.Columns["Interest Paid"].DefaultCellStyle.Format = currencyFormat;
            dgvAmortization.Columns["Principal Paid"].DefaultCellStyle.Format = currencyFormat;
            dgvAmortization.Columns["End Balance"].DefaultCellStyle.Format = currencyFormat;
            dgvAmortization.Columns["Total Paid"].DefaultCellStyle.Format = currencyFormat;

            // Auto-size columns for better readability
            dgvAmortization.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        }
    }
    
}
